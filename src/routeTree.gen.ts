/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthenticationImport } from './routes/_authentication'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as LearnerIndexImport } from './routes/learner/index'
import { Route as AuthenticatedIndexImport } from './routes/_authenticated/index'
import { Route as AuthenticationLogInImport } from './routes/_authentication/log-in'
import { Route as AuthenticationForgetPasswordImport } from './routes/_authentication/forget-password'
import { Route as LearnerQuestionTypesIndexImport } from './routes/learner/question-types/index'
import { Route as AuthenticatedUsersIndexImport } from './routes/_authenticated/users/index'
import { Route as AuthenticatedQuestionsIndexImport } from './routes/_authenticated/questions/index'
import { Route as AuthenticatedDailyLessonsIndexImport } from './routes/_authenticated/daily-lessons/index'
import { Route as LearnerQuestionTypesQuestionTypeIdImport } from './routes/learner/question-types/$questionTypeId'
import { Route as LearnerLessonsLessonIdImport } from './routes/learner/lessons/$lessonId'
import { Route as AuthenticatedQuestionsCreateImport } from './routes/_authenticated/questions/create'
import { Route as AuthenticatedQuestionsQuestionIdImport } from './routes/_authenticated/questions/$questionId'
import { Route as AuthenticatedDailyLessonsLessonIdImport } from './routes/_authenticated/daily-lessons/$lessonId'
import { Route as AuthenticatedDailyLessonsQuestionTypeIdInstructionsImport } from './routes/_authenticated/daily-lessons/$questionTypeId/instructions'

// Create/Update Routes

const AuthenticationRoute = AuthenticationImport.update({
  id: '/_authentication',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const LearnerIndexRoute = LearnerIndexImport.update({
  path: '/learner/',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedIndexRoute = AuthenticatedIndexImport.update({
  path: '/',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticationLogInRoute = AuthenticationLogInImport.update({
  path: '/log-in',
  getParentRoute: () => AuthenticationRoute,
} as any)

const AuthenticationForgetPasswordRoute =
  AuthenticationForgetPasswordImport.update({
    path: '/forget-password',
    getParentRoute: () => AuthenticationRoute,
  } as any)

const LearnerQuestionTypesIndexRoute = LearnerQuestionTypesIndexImport.update({
  path: '/learner/question-types/',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedUsersIndexRoute = AuthenticatedUsersIndexImport.update({
  path: '/users/',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedQuestionsIndexRoute =
  AuthenticatedQuestionsIndexImport.update({
    path: '/questions/',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

const AuthenticatedDailyLessonsIndexRoute =
  AuthenticatedDailyLessonsIndexImport.update({
    path: '/daily-lessons/',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

const LearnerQuestionTypesQuestionTypeIdRoute =
  LearnerQuestionTypesQuestionTypeIdImport.update({
    path: '/learner/question-types/$questionTypeId',
    getParentRoute: () => rootRoute,
  } as any)

const LearnerLessonsLessonIdRoute = LearnerLessonsLessonIdImport.update({
  path: '/learner/lessons/$lessonId',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedQuestionsCreateRoute =
  AuthenticatedQuestionsCreateImport.update({
    path: '/questions/create',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

const AuthenticatedQuestionsQuestionIdRoute =
  AuthenticatedQuestionsQuestionIdImport.update({
    path: '/questions/$questionId',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

const AuthenticatedDailyLessonsLessonIdRoute =
  AuthenticatedDailyLessonsLessonIdImport.update({
    path: '/daily-lessons/$lessonId',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

const AuthenticatedDailyLessonsQuestionTypeIdInstructionsRoute =
  AuthenticatedDailyLessonsQuestionTypeIdInstructionsImport.update({
    path: '/daily-lessons/$questionTypeId/instructions',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/_authentication': {
      id: '/_authentication'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticationImport
      parentRoute: typeof rootRoute
    }
    '/_authentication/forget-password': {
      id: '/_authentication/forget-password'
      path: '/forget-password'
      fullPath: '/forget-password'
      preLoaderRoute: typeof AuthenticationForgetPasswordImport
      parentRoute: typeof AuthenticationImport
    }
    '/_authentication/log-in': {
      id: '/_authentication/log-in'
      path: '/log-in'
      fullPath: '/log-in'
      preLoaderRoute: typeof AuthenticationLogInImport
      parentRoute: typeof AuthenticationImport
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexImport
      parentRoute: typeof AuthenticatedImport
    }
    '/learner/': {
      id: '/learner/'
      path: '/learner'
      fullPath: '/learner'
      preLoaderRoute: typeof LearnerIndexImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/daily-lessons/$lessonId': {
      id: '/_authenticated/daily-lessons/$lessonId'
      path: '/daily-lessons/$lessonId'
      fullPath: '/daily-lessons/$lessonId'
      preLoaderRoute: typeof AuthenticatedDailyLessonsLessonIdImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/questions/$questionId': {
      id: '/_authenticated/questions/$questionId'
      path: '/questions/$questionId'
      fullPath: '/questions/$questionId'
      preLoaderRoute: typeof AuthenticatedQuestionsQuestionIdImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/questions/create': {
      id: '/_authenticated/questions/create'
      path: '/questions/create'
      fullPath: '/questions/create'
      preLoaderRoute: typeof AuthenticatedQuestionsCreateImport
      parentRoute: typeof AuthenticatedImport
    }
    '/learner/lessons/$lessonId': {
      id: '/learner/lessons/$lessonId'
      path: '/learner/lessons/$lessonId'
      fullPath: '/learner/lessons/$lessonId'
      preLoaderRoute: typeof LearnerLessonsLessonIdImport
      parentRoute: typeof rootRoute
    }
    '/learner/question-types/$questionTypeId': {
      id: '/learner/question-types/$questionTypeId'
      path: '/learner/question-types/$questionTypeId'
      fullPath: '/learner/question-types/$questionTypeId'
      preLoaderRoute: typeof LearnerQuestionTypesQuestionTypeIdImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/daily-lessons/': {
      id: '/_authenticated/daily-lessons/'
      path: '/daily-lessons'
      fullPath: '/daily-lessons'
      preLoaderRoute: typeof AuthenticatedDailyLessonsIndexImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/questions/': {
      id: '/_authenticated/questions/'
      path: '/questions'
      fullPath: '/questions'
      preLoaderRoute: typeof AuthenticatedQuestionsIndexImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/users/': {
      id: '/_authenticated/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof AuthenticatedUsersIndexImport
      parentRoute: typeof AuthenticatedImport
    }
    '/learner/question-types/': {
      id: '/learner/question-types/'
      path: '/learner/question-types'
      fullPath: '/learner/question-types'
      preLoaderRoute: typeof LearnerQuestionTypesIndexImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/daily-lessons/$questionTypeId/instructions': {
      id: '/_authenticated/daily-lessons/$questionTypeId/instructions'
      path: '/daily-lessons/$questionTypeId/instructions'
      fullPath: '/daily-lessons/$questionTypeId/instructions'
      preLoaderRoute: typeof AuthenticatedDailyLessonsQuestionTypeIdInstructionsImport
      parentRoute: typeof AuthenticatedImport
    }
  }
}

// Create and export the route tree

interface AuthenticatedRouteChildren {
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
  AuthenticatedDailyLessonsLessonIdRoute: typeof AuthenticatedDailyLessonsLessonIdRoute
  AuthenticatedQuestionsQuestionIdRoute: typeof AuthenticatedQuestionsQuestionIdRoute
  AuthenticatedQuestionsCreateRoute: typeof AuthenticatedQuestionsCreateRoute
  AuthenticatedDailyLessonsIndexRoute: typeof AuthenticatedDailyLessonsIndexRoute
  AuthenticatedQuestionsIndexRoute: typeof AuthenticatedQuestionsIndexRoute
  AuthenticatedUsersIndexRoute: typeof AuthenticatedUsersIndexRoute
  AuthenticatedDailyLessonsQuestionTypeIdInstructionsRoute: typeof AuthenticatedDailyLessonsQuestionTypeIdInstructionsRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
  AuthenticatedDailyLessonsLessonIdRoute:
    AuthenticatedDailyLessonsLessonIdRoute,
  AuthenticatedQuestionsQuestionIdRoute: AuthenticatedQuestionsQuestionIdRoute,
  AuthenticatedQuestionsCreateRoute: AuthenticatedQuestionsCreateRoute,
  AuthenticatedDailyLessonsIndexRoute: AuthenticatedDailyLessonsIndexRoute,
  AuthenticatedQuestionsIndexRoute: AuthenticatedQuestionsIndexRoute,
  AuthenticatedUsersIndexRoute: AuthenticatedUsersIndexRoute,
  AuthenticatedDailyLessonsQuestionTypeIdInstructionsRoute:
    AuthenticatedDailyLessonsQuestionTypeIdInstructionsRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

interface AuthenticationRouteChildren {
  AuthenticationForgetPasswordRoute: typeof AuthenticationForgetPasswordRoute
  AuthenticationLogInRoute: typeof AuthenticationLogInRoute
}

const AuthenticationRouteChildren: AuthenticationRouteChildren = {
  AuthenticationForgetPasswordRoute: AuthenticationForgetPasswordRoute,
  AuthenticationLogInRoute: AuthenticationLogInRoute,
}

const AuthenticationRouteWithChildren = AuthenticationRoute._addFileChildren(
  AuthenticationRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof AuthenticationRouteWithChildren
  '/forget-password': typeof AuthenticationForgetPasswordRoute
  '/log-in': typeof AuthenticationLogInRoute
  '/': typeof AuthenticatedIndexRoute
  '/learner': typeof LearnerIndexRoute
  '/daily-lessons/$lessonId': typeof AuthenticatedDailyLessonsLessonIdRoute
  '/questions/$questionId': typeof AuthenticatedQuestionsQuestionIdRoute
  '/questions/create': typeof AuthenticatedQuestionsCreateRoute
  '/learner/lessons/$lessonId': typeof LearnerLessonsLessonIdRoute
  '/learner/question-types/$questionTypeId': typeof LearnerQuestionTypesQuestionTypeIdRoute
  '/daily-lessons': typeof AuthenticatedDailyLessonsIndexRoute
  '/questions': typeof AuthenticatedQuestionsIndexRoute
  '/users': typeof AuthenticatedUsersIndexRoute
  '/learner/question-types': typeof LearnerQuestionTypesIndexRoute
  '/daily-lessons/$questionTypeId/instructions': typeof AuthenticatedDailyLessonsQuestionTypeIdInstructionsRoute
}

export interface FileRoutesByTo {
  '': typeof AuthenticationRouteWithChildren
  '/forget-password': typeof AuthenticationForgetPasswordRoute
  '/log-in': typeof AuthenticationLogInRoute
  '/': typeof AuthenticatedIndexRoute
  '/learner': typeof LearnerIndexRoute
  '/daily-lessons/$lessonId': typeof AuthenticatedDailyLessonsLessonIdRoute
  '/questions/$questionId': typeof AuthenticatedQuestionsQuestionIdRoute
  '/questions/create': typeof AuthenticatedQuestionsCreateRoute
  '/learner/lessons/$lessonId': typeof LearnerLessonsLessonIdRoute
  '/learner/question-types/$questionTypeId': typeof LearnerQuestionTypesQuestionTypeIdRoute
  '/daily-lessons': typeof AuthenticatedDailyLessonsIndexRoute
  '/questions': typeof AuthenticatedQuestionsIndexRoute
  '/users': typeof AuthenticatedUsersIndexRoute
  '/learner/question-types': typeof LearnerQuestionTypesIndexRoute
  '/daily-lessons/$questionTypeId/instructions': typeof AuthenticatedDailyLessonsQuestionTypeIdInstructionsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/_authentication': typeof AuthenticationRouteWithChildren
  '/_authentication/forget-password': typeof AuthenticationForgetPasswordRoute
  '/_authentication/log-in': typeof AuthenticationLogInRoute
  '/_authenticated/': typeof AuthenticatedIndexRoute
  '/learner/': typeof LearnerIndexRoute
  '/_authenticated/daily-lessons/$lessonId': typeof AuthenticatedDailyLessonsLessonIdRoute
  '/_authenticated/questions/$questionId': typeof AuthenticatedQuestionsQuestionIdRoute
  '/_authenticated/questions/create': typeof AuthenticatedQuestionsCreateRoute
  '/learner/lessons/$lessonId': typeof LearnerLessonsLessonIdRoute
  '/learner/question-types/$questionTypeId': typeof LearnerQuestionTypesQuestionTypeIdRoute
  '/_authenticated/daily-lessons/': typeof AuthenticatedDailyLessonsIndexRoute
  '/_authenticated/questions/': typeof AuthenticatedQuestionsIndexRoute
  '/_authenticated/users/': typeof AuthenticatedUsersIndexRoute
  '/learner/question-types/': typeof LearnerQuestionTypesIndexRoute
  '/_authenticated/daily-lessons/$questionTypeId/instructions': typeof AuthenticatedDailyLessonsQuestionTypeIdInstructionsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/forget-password'
    | '/log-in'
    | '/'
    | '/learner'
    | '/daily-lessons/$lessonId'
    | '/questions/$questionId'
    | '/questions/create'
    | '/learner/lessons/$lessonId'
    | '/learner/question-types/$questionTypeId'
    | '/daily-lessons'
    | '/questions'
    | '/users'
    | '/learner/question-types'
    | '/daily-lessons/$questionTypeId/instructions'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/forget-password'
    | '/log-in'
    | '/'
    | '/learner'
    | '/daily-lessons/$lessonId'
    | '/questions/$questionId'
    | '/questions/create'
    | '/learner/lessons/$lessonId'
    | '/learner/question-types/$questionTypeId'
    | '/daily-lessons'
    | '/questions'
    | '/users'
    | '/learner/question-types'
    | '/daily-lessons/$questionTypeId/instructions'
  id:
    | '__root__'
    | '/_authenticated'
    | '/_authentication'
    | '/_authentication/forget-password'
    | '/_authentication/log-in'
    | '/_authenticated/'
    | '/learner/'
    | '/_authenticated/daily-lessons/$lessonId'
    | '/_authenticated/questions/$questionId'
    | '/_authenticated/questions/create'
    | '/learner/lessons/$lessonId'
    | '/learner/question-types/$questionTypeId'
    | '/_authenticated/daily-lessons/'
    | '/_authenticated/questions/'
    | '/_authenticated/users/'
    | '/learner/question-types/'
    | '/_authenticated/daily-lessons/$questionTypeId/instructions'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  AuthenticationRoute: typeof AuthenticationRouteWithChildren
  LearnerIndexRoute: typeof LearnerIndexRoute
  LearnerLessonsLessonIdRoute: typeof LearnerLessonsLessonIdRoute
  LearnerQuestionTypesQuestionTypeIdRoute: typeof LearnerQuestionTypesQuestionTypeIdRoute
  LearnerQuestionTypesIndexRoute: typeof LearnerQuestionTypesIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  AuthenticationRoute: AuthenticationRouteWithChildren,
  LearnerIndexRoute: LearnerIndexRoute,
  LearnerLessonsLessonIdRoute: LearnerLessonsLessonIdRoute,
  LearnerQuestionTypesQuestionTypeIdRoute:
    LearnerQuestionTypesQuestionTypeIdRoute,
  LearnerQuestionTypesIndexRoute: LearnerQuestionTypesIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_authenticated",
        "/_authentication",
        "/learner/",
        "/learner/lessons/$lessonId",
        "/learner/question-types/$questionTypeId",
        "/learner/question-types/"
      ]
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx",
      "children": [
        "/_authenticated/",
        "/_authenticated/daily-lessons/$lessonId",
        "/_authenticated/questions/$questionId",
        "/_authenticated/questions/create",
        "/_authenticated/daily-lessons/",
        "/_authenticated/questions/",
        "/_authenticated/users/",
        "/_authenticated/daily-lessons/$questionTypeId/instructions"
      ]
    },
    "/_authentication": {
      "filePath": "_authentication.tsx",
      "children": [
        "/_authentication/forget-password",
        "/_authentication/log-in"
      ]
    },
    "/_authentication/forget-password": {
      "filePath": "_authentication/forget-password.tsx",
      "parent": "/_authentication"
    },
    "/_authentication/log-in": {
      "filePath": "_authentication/log-in.tsx",
      "parent": "/_authentication"
    },
    "/_authenticated/": {
      "filePath": "_authenticated/index.tsx",
      "parent": "/_authenticated"
    },
    "/learner/": {
      "filePath": "learner/index.tsx"
    },
    "/_authenticated/daily-lessons/$lessonId": {
      "filePath": "_authenticated/daily-lessons/$lessonId.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/questions/$questionId": {
      "filePath": "_authenticated/questions/$questionId.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/questions/create": {
      "filePath": "_authenticated/questions/create.tsx",
      "parent": "/_authenticated"
    },
    "/learner/lessons/$lessonId": {
      "filePath": "learner/lessons/$lessonId.tsx"
    },
    "/learner/question-types/$questionTypeId": {
      "filePath": "learner/question-types/$questionTypeId.tsx"
    },
    "/_authenticated/daily-lessons/": {
      "filePath": "_authenticated/daily-lessons/index.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/questions/": {
      "filePath": "_authenticated/questions/index.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/users/": {
      "filePath": "_authenticated/users/index.tsx",
      "parent": "/_authenticated"
    },
    "/learner/question-types/": {
      "filePath": "learner/question-types/index.tsx"
    },
    "/_authenticated/daily-lessons/$questionTypeId/instructions": {
      "filePath": "_authenticated/daily-lessons/$questionTypeId/instructions.tsx",
      "parent": "/_authenticated"
    }
  }
}
ROUTE_MANIFEST_END */
